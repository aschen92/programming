# models.py

from vec3 import *
from util import *
from math import *

# Surfaces for Scene Modeling
#----------------------------------------------------------------------
class Sphere:

    def __init__(self, pos=(0,0,0), radius=1, color=(1,.25,.25)):
        self.pos = Vector3(*pos)
        self.rad = radius
        self.color = color

    def intersect(self, ray, interval, rec):
        a = ray.dir.dot(ray.dir) # ray.dir * ray.dir
        b = 2 * (ray.start - self.pos).dot(ray.dir)
        c = (ray.start - self.pos).dot(ray.start - self.pos) - self.rad**2

        discrim = b**2 - (4 * a * c)
        

        if discrim < 0:
            return False
        
        discrimroot = sqrt(discrim)
        
        t = (-b - discrimroot) /( 2 * a)
        if t in interval:
            hitpoint = ray.pointAt(t)
            normal = (hitpoint-self.pos).normalized()
            rec.fill(t,hitpoint,normal,self.color)
            return True

        t1 = (-b + discrimroot) / 2 * a
        if t1 in interval:
            hitpoint = ray.pointAt(t)
            normal = (hitpoint-pos).normalized()
            rec.fill(t,hitpoint,normal,self.color)
            return True

        return False

#----------------------------------------------------------------------

class Quad:

    def __init__(self, a, b, c, d, color):
        self.tri1 = Triangle(a, b, c, color)
        self.tri2 = Triangle(c, d, a, color)
        

    def intersect(self, ray, interval, hitInfo):
        return self.tri1.intersect(ray, interval, hitInfo) and self.tri2.intersect(ray, interval, hitInfo)



#----------------------------------------------------------------------

class Triangle:
    
    def __init__(self, a, b, c, color):
        self.a = a
        self.b = b
        self.c = c
        self.color = color
        


    def  intersect(self, ray, interval, hitInfo):
       
 
        # M
        xa, ya, za = self.a.tuple()
        xb, yb, zb = self.b.tuple()
        xc, yc, zc = self.c.tuple()
       
        a = (xa - xb)
        b = (ya - yb)
        c = (za - zb)
        d = (xa - xc)
        e = (ya - yc)
        f = (za - zc)
        g = ray.dir.x
        h = ray.dir.y
        i = ray.dir.z
        j = (xa - ray.start.x)
        k = (ya - ray.start.y)
        l = (za - ray.start.z)

        # Saving on number of computations
        eihf = (e*i) - (h*f)
        akjb = (a*k) - (j*b)
        gfdi = (g*f) - (d*i)
        dheg = (d*h) - (e*g)
        jcal = (j*c) - (a*l)
        blkc = (b*l) - (k*c)
       
        M = a * eihf + b * gfdi + c * dheg
       
        if M == 0:
            return False
       
       
        # t
        t = -1 * ((f * akjb + e * jcal + d * blkc)/M)
        if (t < interval.low) or (t > interval.high):
            return False
       
        # alpha
        alpha = ((i * akjb + h * jcal + g * blkc)/M)
        if (alpha < 0) or (alpha > 1):
            return False
       
        # beta
        beta = ((j * eihf + k * gfdi + l * dheg)/M)
        if (beta < 0) or (beta > 1 - alpha):
            return False
       
        # Hit Info
        hitpoint = ray.pointAt(t)
        normal = (self.b - self.a).cross(self.c - self.a).normalized()
        rec.fill(t,hitpoint,normal,self.color)
        return True
    



    def __repr__(self):
        pass
        

#----------------------------------------------------------------------
class Group:

    def __init__(self):
        self.items = []
    
    def add(self, surface):
        self.items.append(surface)
    
    def intersect(self, ray, interval, rec):
        hit = False
        for o in self.items:
            if(o.intersect(ray,interval,rec)):
                hit = True
                interval.high = rec.t

        return hit

 
#----------------------------------------------------------------------
class Material:

    def __init__(self, diffuse,        # diffuse (Lambert) coefficients (req.)
                 ambient=None,         # ambient coefficients
                 specular=(.5,.5,.5),  # specular reflection coefficients
                 exponent=30,          # Shinyness exponent, higher = shinier
                 reflect=None):        # ideal reflection coefficients
        if ambient:           # if ambient is not supplied, use diffuse        
            self.ambient = RGB(*ambient)
        else:
            self.ambient = RGB(*diffuse)
        self.diffuse = RGB(*diffuse)
        self.specular = RGB(*specular)
        self.exponent = exponent
        if reflect:
            self.reflect = RGB(*reflect)

    def __repr__(self):
        return "Material({0}, {1}, {2}, {3}, {4})".format(self.ambient,
                                                          self.diffuse,
                                                          self.specular,
                                                          self.exponent,
                                                          self.reflect)

#------------------------------------------------------------
# example materials from Computer Graphics Using OpenGL, by F.S. Hill

BLACK_PLASTIC = Material(diffuse=(.01,.01,.01), ambient=(0,0,0), 
                         specular=(.5,.5,.5), exponent=32)

BRASS = Material((.780392,.568627,.113725), (.329412,.223529,.027451),
                 (.992157,.941176,.807843), 27.8974)

COPPER = Material((.7038,.27048,.0828), (.19125,.0735,.0225),
                 (.256777, .137622, .086014), 12.8)

GOLD = Material((.75164,.60648,.22648), (.24725,.1995,.0745),
                (.628281,.555802,.366065), 51.2)

SILVER = Material((.50754,)*3, (.19225,)*3, (.508273,)*3, 51.2)
        
